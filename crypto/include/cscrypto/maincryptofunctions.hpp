#ifndef CSCRYPTO_MAINCRYPTOFUNCTIONS_HPP
#define CSCRYPTO_MAINCRYPTOFUNCTIONS_HPP

#include "cscrypto/privatekey.hpp"

namespace cscrypto {
/**
*   @brief Does the job for the correct work of the crypto library.
*
*   Should be called before any other crypto function.
*   @return true if initialization successful, false if error.
*/

bool CryptoInit();

/**
*   @brief Calculates hash from byte array of arbitrary size.
*
*   @param[out] hash - saves calculated hash here
*   @param[in]  data - hash value depends on this
*
*   If you need to calculate MAC (message authentication code)
*   use two optional params (key and key_size). Two calculated
*   hashes with the same data but different keys will not match.
*/
void CalculateHash(Hash& hash, const Byte* data, size_t data_size,
                   const Byte* key = nullptr, size_t key_size = 0);

/**
*   @brief Generates new crypto keys appropriate to cipher or to sign data.
*/
void GenerateKeyPair(PublicKey& public_key, PrivateKey& private_key);

/**
*   @brief Tries to sign data and verify generated signature with given keys.
*   @return true if keys are valid, false otherwise.
*/
bool ValidateKeyPair(const PublicKey& public_key, const PrivateKey& private_key);

PublicKey GetMatchingPublic(const PrivateKey& private_key);

/**
*   @brief Signs data with private_key and saves the result in signature.
*/
void GenerateSignature(Signature& signature, const PrivateKey& private_key,
                       const Byte* data, size_t data_size);

/**
*   @brief Verifies with public_key that signature of data was generated by
*   related private key owner.
*
*   @return true if signature is correct, false if incorrect
*/
bool VerifySignature(const Signature& signature, const PublicKey& public_key,
                     const Byte* data, size_t data_size);

bool VerifySignature(const Byte* signature, const Byte* public_key,
                     const Byte* data, size_t data_size);

/**
*   @brief Fills buf_size bytes starting at buf with an unpredictable sequence of bytes.
*/
void FillBufWithRandomBytes(void* buf, size_t buf_size);
void FillWithZeros(void* buf, size_t buf_size);

} // namespace cscrypto
#endif // CSCRYPTO_MAINCRYPTOFUNCTIONS_HPP
