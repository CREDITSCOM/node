/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef variant_TYPES_H
#define variant_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace variant {

class Variant;

typedef struct _Variant__isset {
  _Variant__isset() : v_bool(false), v_i8(false), v_i16(false), v_i32(false), v_i64(false), v_double(false), v_string(false), v_list(false), v_set(false), v_map(false) {}
  bool v_bool :1;
  bool v_i8 :1;
  bool v_i16 :1;
  bool v_i32 :1;
  bool v_i64 :1;
  bool v_double :1;
  bool v_string :1;
  bool v_list :1;
  bool v_set :1;
  bool v_map :1;
} _Variant__isset;

class Variant : public virtual ::apache::thrift::TBase {
 public:

  Variant(const Variant&);
  Variant(Variant&&);
  Variant& operator=(const Variant&);
  Variant& operator=(Variant&&);
  Variant() : v_bool(0), v_i8(0), v_i16(0), v_i32(0), v_i64(0), v_double(0), v_string() {
  }

  virtual ~Variant() throw();
  bool v_bool;
  int8_t v_i8;
  int16_t v_i16;
  int32_t v_i32;
  int64_t v_i64;
  double v_double;
  std::string v_string;
  std::vector<Variant>  v_list;
  std::set<Variant>  v_set;
  std::map<Variant, Variant>  v_map;

  _Variant__isset __isset;

  void __set_v_bool(const bool val);

  void __set_v_i8(const int8_t val);

  void __set_v_i16(const int16_t val);

  void __set_v_i32(const int32_t val);

  void __set_v_i64(const int64_t val);

  void __set_v_double(const double val);

  void __set_v_string(const std::string& val);

  void __set_v_list(const std::vector<Variant> & val);

  void __set_v_set(const std::set<Variant> & val);

  void __set_v_map(const std::map<Variant, Variant> & val);

  bool operator == (const Variant & rhs) const
  {
    if (__isset.v_bool != rhs.__isset.v_bool)
      return false;
    else if (__isset.v_bool && !(v_bool == rhs.v_bool))
      return false;
    if (__isset.v_i8 != rhs.__isset.v_i8)
      return false;
    else if (__isset.v_i8 && !(v_i8 == rhs.v_i8))
      return false;
    if (__isset.v_i16 != rhs.__isset.v_i16)
      return false;
    else if (__isset.v_i16 && !(v_i16 == rhs.v_i16))
      return false;
    if (__isset.v_i32 != rhs.__isset.v_i32)
      return false;
    else if (__isset.v_i32 && !(v_i32 == rhs.v_i32))
      return false;
    if (__isset.v_i64 != rhs.__isset.v_i64)
      return false;
    else if (__isset.v_i64 && !(v_i64 == rhs.v_i64))
      return false;
    if (__isset.v_double != rhs.__isset.v_double)
      return false;
    else if (__isset.v_double && !(v_double == rhs.v_double))
      return false;
    if (__isset.v_string != rhs.__isset.v_string)
      return false;
    else if (__isset.v_string && !(v_string == rhs.v_string))
      return false;
    if (__isset.v_list != rhs.__isset.v_list)
      return false;
    else if (__isset.v_list && !(v_list == rhs.v_list))
      return false;
    if (__isset.v_set != rhs.__isset.v_set)
      return false;
    else if (__isset.v_set && !(v_set == rhs.v_set))
      return false;
    if (__isset.v_map != rhs.__isset.v_map)
      return false;
    else if (__isset.v_map && !(v_map == rhs.v_map))
      return false;
    return true;
  }
  bool operator != (const Variant &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Variant & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Variant &a, Variant &b);

std::ostream& operator<<(std::ostream& out, const Variant& obj);

} // namespace

#endif
